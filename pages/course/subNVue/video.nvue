<template>
	<view>
		<!-- 状态栏高度，为了显示状态栏 -->
		<view :style="{height: statusBarHeight + 'rpx'}"></view>
		
		<video ref="video" class="video"  
			:poster="videoMidea.mainImage"
			:src="videoMidea.videoUrl"
			:controls="false"
			:show-fullscreen-btn="false"
			:show-center-play-btn="false"
			:show-progress="false"
			@ended="nextPlay" @timeupdate="timeupdate"
			>
			<!-- 头部 后退，标题 -->
			<cover-view class="controls-top row" v-if="showControls">
				<text class="iconfont" @click.stop="backHandler">&#xe679;</text>
				<text class="title">{{videoMidea.title}}</text>
			</cover-view>
			
			<!-- 中间区域，播放按钮 -->
			<cover-view class="controls-center center" @click="showHideControls">
				<text v-if="showControls && !play" class="stop iconfont" @click.stop="playVideo">&#xe625;</text>
			</cover-view>
			
			<!-- 底部区域 -->
			<cover-view class="controls-bottom row center" 
				v-if="showControls" :style="{width: `${controlsWidth}px`}">
				<!-- 播放/暂停和下一节 -->
				<view class="row">
					<!-- 播放 -->
					<text v-if="!play" @click="playVideo" class="video-btn iconfont">&#xe625;</text>
					<!-- 暂停 -->
					<text v-else @click="playVideo" class="video-btn iconfont">&#xe62c;</text>
					<!-- 下一节 -->
					<text class="video-btn iconfont" @click="nextPlay">&#xe61b;</text>
				</view>
				
				<!-- 当前播放时长 -->
				<text class="time">{{currentStr}}</text>
				<!-- 进度条 -->
				<view class="bottom-slider">
					<slider-bar :duration="duration" :current="current"
						:sliderWidth="sliderWidth" :direction="fullScreen ? 'screenY': 'screenX'"
						@change="change"
						:rate="parseFloat(currentRate)"
					>
					</slider-bar>
				</view>
				<!-- 总时长00:00 -->
				<text class="time">{{durationStr}}</text>
				
				<view class="row">
					<!-- 倍速 -->
					<text class="video-btn" @click="showHideRateView">{{currentRate}}x</text>
					<!-- 全屏 -->
					<text v-if="!fullScreen" class="video-btn iconfont" @click="fullScreenHandler">&#xe623;</text>
					<!-- 退出全屏 -->
					<text v-else class="video-btn iconfont" @click="fullScreenHandler">&#xe61e;</text>
				</view>
			</cover-view>
			
			<!-- 倍速 rate-list  rate-item-->
			<cover-view v-if="rateView" class="center" :class="fullScreen ? 'rate-list-full': 'rate-list' ">
				<text v-for="(rate, index) in rates" :key="index"
					:class="{
						'rate-item-full': fullScreen, 
						'rate-item': !fullScreen,
						'active' : rate === currentRate
					 }"
					@click.stop="clickRate(rate)">{{rate}}x</text>
			</cover-view>
		</video>
	</view>
</template>

<script>
	let videoContext = null
	
	// 定时器对象
	let timer = null 
	
	import sliderBar from './components/slider-bar.nvue'
	export default {
		components: {sliderBar},
		
		data() {
			return {
				statusBarHeight: 0,
				videoMidea: {
					id: 1,
					title: '01-项目需求分析和功能介绍',
					mainImage: '', //'https://gd4.alicdn.com/imgextra/i4/3603079088/O1CN01dczOSM2H0LvTowhkl_!!3603079088.png',
					videoUrl: '', //'http://baobab.kaiyanapp.com/api/v1/playUrl?vid=164016&resourceType=video&editionType=low&source=aliyun&playUrlType=url_oss'
				},
				
				play: false, // 正在播放
				showControls: true, // 显示控制按钮
				duration: 60, //当前视频总时长（秒） 
				current: 0, // 当前播放所在的时长（秒）
				fullScreen: false, //是否全屏
				controlsHeight: 0, // 控制层占用高
				controlsWidth: 0, // 控制层占用宽
				
				rates: ['0.8', '1.0', '1.25', '1.5', '2.0'],
				currentRate: '1.0', // 当前倍速率
				rateView: false, // 显示隐藏倍速窗口
				
				chapterList: [], //课程列表数据
				activeObj: {}, // 当前选中的课程下标
			}
		},
		
		onLoad() {
			const res = uni.getSystemInfoSync()
			this.statusBarHeight = res.statusBarHeight
			
			// 屏幕的宽高
			this.controlsHeight = res.screenHeight
			this.controlsWidth = res.screenWidth
			
			// 监听其他页面传递的数据
			uni.$on('video', this.videoHandlerEvent)
		},
		
		onUnload() {
			// 卸载页面时，移除监听事件 
			uni.$off('video')
		},
		
		watch: {
			
			
			fullScreen(newVal, oldVal) {
				// 获取当前的宽度，用于交换宽度
				const width = this.controlsWidth
				this.controlsWidth = this.controlsHeight
				this.controlsHeight = width
			}
		},
		
		mounted() {
			// 获取播放组件实例
			videoContext = this.$refs.video
			// console.log('videoContext', videoContext)
		},
		
		beforeCreate() {
			// uni.requireNativePlugin('dom')
			const domModule = weex.requireModule('dom')
			domModule.addRule('fontFace', {
				'fontFamily': "iconfont",
				'src': "url('~@/static/icon/iconfont.ttf')"
			});
		},
		
		methods: {
			// course-play页面会传递数据进行触发到此方法
			videoHandlerEvent(e) {
				// console.log('接收到其他页面传递的数据', e)
				switch (e.type){
					case 'init':
						// 初始化数据
						const course = e.params.course
						this.videoMidea.mainImage = course.mainImage
						this.videoMidea.id = course.id
						console.log('this.videoMidea.mainImage', this.videoMidea.mainImage)
						// 选中下标
						this.activeObj = e.params.activeObj
						// 课程列表
						this.chapterList = e.params.chapterList
						//获取第1节课
						const chapter = this.chapterList[this.activeObj.chapterIndex]
						const section = chapter && chapter.sectionList[this.activeObj.sectionIndex]
						if(section) {
							this.videoMidea.videoUrl = section.videoUrl || ''
							this.videoMidea.title = section.name
						}
						break;
					case 'change':
						// 当前播放的下标，为了播放下一节课
						this.activeObj = e.params.activeObj
						// 播放视频
						this.playSection( e.params.section )
						break;
					default:
						break;
				}
			},
			
			// 播放指定视频
			playSection(section) {
				if(section && section.videoUrl) {
					// 暂停
					videoContext.pause()
					// 获取新的播放地址
					this.videoMidea.videoUrl = section.videoUrl
					this.videoMidea.title = section.name
					// 播放
					setTimeout(()=> {
						videoContext.play()
						this.play = true
					}, 300)
				}else {
					uni.showToast({
						title: '视频资源不存在',
						icon: 'none'
					})
				}
			},
			
			// 播放到当前视频未尾，播放下一节
			nextPlay(e) {
				//console.log('e', e)
				if(e && e.type === 'ended') {
					// 播放到未尾
					const autoPlay = uni.getStorageSync('auto-play')
					if(!autoPlay) {
						uni.showModal({
							content: '是否自动播放下个视频?',
							success: (res) => {
								// 点击确定
								if(res.confirm) {
									uni.setStorageSync('auto-play', true)
								}
								// 播放下个视频
								this.nextPlay()
							}
						})
						return
					}
				}
				
				// 1. 获取当前章的下一节课，有一下课，则播放一下节
				let chapter = this.chapterList[this.activeObj.chapterIndex]
				let section = chapter && chapter.sectionList[this.activeObj.sectionIndex+1]
				if(section && section.videoUrl) {
					// 播放当前章的下一节课
					this.activeObj.sectionIndex++
					this.playSection(section)
				}else{
					// 2. 当前章没有一下节课，播放下一章第一节课
					chapter = this.chapterList[this.activeObj.chapterIndex+1]
					if(chapter && chapter.sectionList && chapter.sectionList.length>0) {
						// 下一章第1节课
						this.activeObj.chapterIndex++
						this.activeObj.sectionIndex=0
						section = chapter.sectionList[this.activeObj.sectionIndex]
						// 播放视频
						this.playSection(section)
					}else {
						// 3. 没有一下章节(末尾)，暂停视频，提示：已观看最后一节课
						videoContext.pause()
						uni.showToast({
							title: '已观看最后一节课',
							icon: 'none'
						})
						this.play = false
						this.showControls = true
					}
				}
				
			},
			
			// 获取播放进度变化，视频总时长duration，播放当前时长currentTime
			timeupdate(event) {
				// console.log('event', event)
				this.duration = event.detail.duration
				this.current = event.detail.currentTime
			},
			
			// 点击后退按钮
			backHandler() {
				if(this.fullScreen) {
					// 全屏时，退出全屏
					this.fullScreenHandler()
				}else {
					// 非全屏，返回上一页
					uni.navigateBack()
				}
			},
			
			// 播放或暂停视频
			playVideo() {
				if(this.play) {
					// 暂停
					videoContext.pause()
				}else {
					// 播放
					videoContext.play()
					// 隐藏控制按钮
					this.showHideControls()
				}
				this.play = !this.play
			},
			
			// 显示或隐藏控制层
			showHideControls() {
				this.showControls = !this.showControls
				
				// 隐藏倍速视图
				this.rateView = false
				
				// 定时隐藏控制层
				if(this.showControls) {
					timer = timer ? clearTimeout(timer) : null
					timer = setTimeout(()=>{
						this.showControls = false
					}, 3000) // 3秒隐藏
				}
			},
			
			// 切换或退出全屏
			fullScreenHandler() {
				if(this.fullScreen) {
					//退出全屏
					videoContext.exitFullScreen()
				}else {
					// 切换到全屏
					videoContext.requestFullScreen()
				}
				this.fullScreen = !this.fullScreen
			},
			
			
			// 格式化时间 分钟:秒 
			formatSeconds(totalSecond) {
				let minute = parseInt(totalSecond/60)
				if(minute<10) minute = "0"+minute
				let second = parseInt(totalSecond%60)
				if(second<10) second = "0"+second
				let time = minute + ":" + second
				if(totalSecond >= 0) {
					return time
				}else {
					return "00:00"
				}
			},
			
			// 拖动进度条结束时触发，传递当前位置的秒数
			change(currentSecond){
				this.current = currentSecond
				// 跳转到指定位置播放
				videoContext.seek(currentSecond)
			},
			
			// 点击倍速
			clickRate(rate) {
				this.currentRate = rate
				// 设置倍速，进行播放
				videoContext.playbackRate( parseFloat(rate) )
				this.showHideRateView()
			},
			
			// 显示隐藏倍速窗口
			showHideRateView() {
				this.rateView = !this.rateView
			}
		},
		
		computed: {
			durationStr() {
				return this.formatSeconds(this.duration) 
			},
			currentStr() {
				return this.formatSeconds(this.current) 
			},
			
			// 进度条宽度
			sliderWidth() {
				// (320+220) rpx 四个按钮+2个时间宽度, 转为px
				return this.controlsWidth - uni.upx2px(320+220)
			}
		}
	}
</script>

<style>
	.iconfont {
		font-family: iconfont;
		font-size: 50rpx;
		color: #FFFFFF;
	}
	.video {
		width: 750rpx;
		height: 225px;
	}
	
	.controls-top {
		height: 90rpx;
		padding: 0 15rpx;
		align-items: center;
		background-image: linear-gradient(to top, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.8));;
	}
	.title {
		color: #FFFFFF;
		font-size: 30rpx;
		width: 500rpx;
		lines: 1;
		text-overflow: ellipsis;
	}
	
	/* 中间区域 */
	.controls-center{
		position: absolute;
		top: 90rpx;
		left: 0;
		right: 0;
		bottom: 90rpx;
		/* 防止有渐变阴影 */
		background-color: rgba(0,0,0,0);
	}
	.stop{
		padding: 20rpx 35rpx;
		background-color: rgba(0,0,0,0.6);
		border-radius: 10px;
	}
	
	/* 底部区域 */
	.controls-bottom{
		position: absolute;
		bottom: 0;
		height: 90rpx;
		width: 750rpx;
		background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.8));;
	}
	.video-btn {
		width: 80rpx;
		line-height: 90rpx;
		text-align: center;
		color: #FFFFFF;
		font-size: 30rpx;
	}
	.time {
		font-size: 28rpx;
		color: #FFFFFF;
		width: 110rpx;
		text-align: center;
	}
	.bottom-slider {
		flex-direction: row;
		align-items: center;
		height: 90rpx;
		/* 减去固定的宽度，就是此进度条宽度 */
		flex: 1; 
		text-align: center;
	}
	
	
	/* 非全屏倍速样式 */
	.rate-list{
		position: absolute;
		bottom: 70rpx;
		right: 65rpx;
		background-color: rgba(0,0,0, 0.7);
		width: 110rpx;
		border-radius: 10rpx;
	}
	.rate-item{
		color: #FFFFFF;
		font-size: 35rpx;
		line-height: 60rpx;
	}
	.active {
		color: #345dc2;
	}
	
	/* 全屏倍速样式 */
	.rate-list-full {
		width: 400rpx;
		background-color: rgba(0,0,0, 0.7);
		position: absolute;
		right: 0;
		top: 0;
		bottom: 0;
	}
	.rate-item-full {
		color: #FFFFFF;
		font-size: 50rpx;
		line-height: 130rpx;
	}
</style>
